'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _color = require('color');

var _color2 = _interopRequireDefault(_color);

var _DocsBlockTypes = require('./DocsBlockTypes');

var _DocsBlockTypes2 = _interopRequireDefault(_DocsBlockTypes);

var _DocsCustomStyleMap = require('./DocsCustomStyleMap');

var _DocsCustomStyleMap2 = _interopRequireDefault(_DocsCustomStyleMap);

var _DocsDataAttributes = require('./DocsDataAttributes');

var _DocsDataAttributes2 = _interopRequireDefault(_DocsDataAttributes);

var _DocsDecorator = require('./DocsDecorator');

var _DocsDecorator2 = _interopRequireDefault(_DocsDecorator);

var _DocsDecoratorTypes = require('./DocsDecoratorTypes');

var _DocsDecoratorTypes2 = _interopRequireDefault(_DocsDecoratorTypes);

var _asElement = require('./asElement');

var _asElement2 = _interopRequireDefault(_asElement);

var _createDocsTableEntityDataFromElement = require('./createDocsTableEntityDataFromElement');

var _createDocsTableEntityDataFromElement2 = _interopRequireDefault(_createDocsTableEntityDataFromElement);

var _getSafeHTML = require('./getSafeHTML');

var _getSafeHTML2 = _interopRequireDefault(_getSafeHTML);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _uniqueID = require('./uniqueID');

var _uniqueID2 = _interopRequireDefault(_uniqueID);

var _DocsCharacter = require('./DocsCharacter');

var _getCSSRules = require('./getCSSRules');

var _draftJs = require('draft-js');

var _immutable = require('immutable');

var _draftConvert = require('draft-convert');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_ElementLike = require('./Types').babelPluginFlowReactPropTypes_proptype_ElementLike || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_DocumentLike = require('./Types').babelPluginFlowReactPropTypes_proptype_DocumentLike || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_DocsImageEntityData = require('./Types').babelPluginFlowReactPropTypes_proptype_DocsImageEntityData || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_DocsTableEntityData = require('./Types').babelPluginFlowReactPropTypes_proptype_DocsTableEntityData || require('prop-types').any;

// See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
var babelPluginFlowReactPropTypes_proptype_SafeHTML = require('./getSafeHTML').babelPluginFlowReactPropTypes_proptype_SafeHTML || require('prop-types').any;

var CSS_BOLD_MIN_NUMERIC_VALUE = 500;
var CSS_BOLD_VALUES = new _set2.default(['bold', 'bolder']);
var CSS_NOT_BOLD_VALUES = new _set2.default(['light', 'lighter', 'normal']);
var CSS_BOLD_MIN_NUMERIC_VALUE_PATTERN = /^\d+$/;

// Name of the outermost element used by atomic component.
var ATOMIC_ELEMENT_NODE_NAME = 'FIGURE';

// See https://draftjs.org/docs/advanced-topics-inline-styles.html
var STYLE_BOLD = 'BOLD';

// See https://www.w3schools.com/jsref/prop_node_nodetype.asp
// See https://msdn.microsoft.com/en-us/library/windows/desktop/ms649015
// Note that the pasted HTML may contain HTML comment like
// `<!--StartFragment -->` generated by browser. Developer should check
// `nodeType` to ensure only valid HTML element is used.
var NODE_TYPE_ELEMENT = Node.ELEMENT_NODE;

// Processing HTML is hard, and here are some resources that could be helpful.
// https://goo.gl/4mvkWg : Sample HTML converted into Draft content state
// https://github.com/facebook/draft-js/issues/416#issuecomment-221639163
// https://github.com/draft-js-plugins/draft-js-plugins/pull/474/files
// https://zhuanlan.zhihu.com/p/24951621
// https://github.com/facebook/draft-js/issues/787
// https://github.com/HubSpot/draft-convert#convertfromhtml
// https://zhuanlan.zhihu.com/p/24951621
function convertFromHTML(html, editorState, domDocument) {
  // See https://github.com/HubSpot/draft-convert#convertfromhtml
  var safeHTML = (0, _getSafeHTML2.default)(html, domDocument);
  var handlers = {
    htmlToBlock: htmlToBlock,
    htmlToEntity: htmlToEntity,
    htmlToStyle: htmlToStyle,
    textToEntity: textToEntity
  };
  (0, _keys2.default)(handlers).forEach(function (key) {
    var fn = handlers[key];
    handlers[key] = function (nodeName, node, currentStyle) {
      return fn(safeHTML, nodeName.toUpperCase(), node, currentStyle);
    };
  });
  var contentState = (0, _draftConvert.convertFromHTML)(handlers)(safeHTML.html);
  var decorator = _DocsDecorator2.default.get();
  return editorState ? _draftJs.EditorState.push(editorState, contentState) : _draftJs.EditorState.createWithContent(contentState, decorator);
}

////////////////////////////////////////////////////////////////////////////////

// Fake DOM Node that is good enough work with. This is faster than using
// a real DOM node.

var FakeAtomicElement = function () {
  function FakeAtomicElement(data) {
    (0, _classCallCheck3.default)(this, FakeAtomicElement);
    this._attributes = new _map2.default();
    this.nodeName = ATOMIC_ELEMENT_NODE_NAME;
    this.nodeType = NODE_TYPE_ELEMENT;

    this._attributes.set(_DocsDataAttributes2.default.ATOMIC_BLOCK_DATA, (0, _stringify2.default)(data));
  }

  (0, _createClass3.default)(FakeAtomicElement, [{
    key: 'getAttribute',
    value: function getAttribute(name) {
      return this._attributes.get(name) || '';
    }
  }, {
    key: 'hasAttribute',
    value: function hasAttribute(name) {
      return this._attributes.has(name);
    }
  }]);
  return FakeAtomicElement;
}();

function htmlToStyle(safeHTML, nodeName, node, currentStyle) {
  return currentStyle.withMutations(function (nextStyle) {
    if (node.nodeType !== NODE_TYPE_ELEMENT) {
      // Plain characters.
      return;
    }
    var el = (0, _asElement2.default)(node);
    var classList = el.classList,
        style = el.style;

    if (nodeName === ATOMIC_ELEMENT_NODE_NAME && classList && classList.length) {
      // Copy className from atomic node.
      classList.forEach(function (className, ii) {
        nextStyle.add(className);
      });
    }

    if (!style) {
      // `el.style` could be `null` if `el` is `<math />`.
      return;
    }

    var customStyleHandlers = {
      backgroundColor: _DocsCustomStyleMap2.default.forBackgroundColor,
      color: _DocsCustomStyleMap2.default.forColor,
      fontSize: _DocsCustomStyleMap2.default.forFontSize,
      lineHeight: _DocsCustomStyleMap2.default.forLineHeight,
      listStart: _DocsCustomStyleMap2.default.forListStart,
      listStyleType: _DocsCustomStyleMap2.default.forListStyleType,
      textAlign: _DocsCustomStyleMap2.default.forTextAlign
    };

    if (nodeName === 'LI') {
      var parentElement = (0, _asElement2.default)(el.parentElement);
      if (parentElement.nodeName === 'OL') {
        var start = parentElement.getAttribute('start');
        var styleName = _DocsCustomStyleMap2.default.forListStart(start);
        styleName && nextStyle.add(styleName);
      }
    }

    (0, _keys2.default)(customStyleHandlers).forEach(function (attr) {
      var styleValue = style[attr];
      if (!styleValue) {
        return;
      }
      var fn = customStyleHandlers[attr];
      var styleName = fn(styleValue);
      if (styleName) {
        nextStyle.add(styleName);
      }
    });

    if (style.fontWeight) {
      var fontWeight = style.fontWeight;
      // When content is copied from google doc, its HTML may use a tag
      // like `<b style="font-weight: normal">...</b>` which should not make the
      // text bold. This block handles such case.
      // See related issue: https://github.com/facebook/draft-js/issues/481

      if (CSS_BOLD_VALUES.has(fontWeight)) {
        nextStyle = nextStyle.add(STYLE_BOLD);
      } else if (CSS_NOT_BOLD_VALUES.has(fontWeight)) {
        nextStyle = nextStyle.remove(STYLE_BOLD);
      } else if (CSS_BOLD_MIN_NUMERIC_VALUE_PATTERN.test(fontWeight)) {
        nextStyle = parseInt(fontWeight, 10) >= CSS_BOLD_MIN_NUMERIC_VALUE ? nextStyle.add(STYLE_BOLD) : nextStyle.remove(STYLE_BOLD);
      }
    }
  });
}

function htmlToEntity(safeHTML, nodeName, node, createEntity) {
  if (node.nodeType !== NODE_TYPE_ELEMENT) {
    return null;
  }
  var el = (0, _asElement2.default)(node);
  switch (nodeName) {
    case ATOMIC_ELEMENT_NODE_NAME:
      return htmlToAtomicBlockEntity(safeHTML, nodeName, el, createEntity);

    case 'TABLE':
      el = normalizeNodeForTable(safeHTML, nodeName, el);
      if (el) {
        nodeName = el.nodeName.toLowerCase();
        return htmlToAtomicBlockEntity(safeHTML, nodeName, el, createEntity);
      }
      break;
    case 'A':
      return createEntity(_DocsDecoratorTypes2.default.LINK, 'MUTABLE', { url: el.href });
  }

  if (!el) {
    return null;
  }

  var valueStr = el.getAttribute(_DocsDataAttributes2.default.DECORATOR_DATA);
  var ent = void 0;
  if (valueStr) {
    try {
      ent = JSON.parse(valueStr);
    } catch (ex) {
      return null;
    }
  }

  if (!ent) {
    return null;
  }
  return createEntity(ent.type, ent.mutability, ent.data);
}

function htmlToAtomicBlockEntity(safeHTML, nodeName, node, createEntity) {
  if (nodeName !== ATOMIC_ELEMENT_NODE_NAME) {
    return null;
  }
  var element = (0, _asElement2.default)(node);
  var dataStr = element.getAttribute(_DocsDataAttributes2.default.ATOMIC_BLOCK_DATA);
  if (!dataStr) {
    return null;
  }
  var data = void 0;
  try {
    data = JSON.parse(dataStr);
  } catch (ex) {
    return null;
  }
  var _data = data,
      blockType = _data.blockType,
      entityData = _data.entityData;

  if (!blockType || !entityData) {
    return null;
  }
  return createEntity(blockType, 'IMMUTABLE', entityData);
}

function textToEntity(safeHTML, text, createEntity) {
  return [];
}

function htmlToBlock(safeHTML, nodeName, node) {
  var normalizedNode = normalizeNodeForTable(safeHTML, nodeName, node);
  if (normalizedNode) {
    node = normalizedNode;
    nodeName = node.nodeName;
  }
  return htmlToAtomicBlock(safeHTML, nodeName, node);
}

function htmlToAtomicBlock(safeHTML, nodeName, node) {
  if (nodeName !== ATOMIC_ELEMENT_NODE_NAME) {
    return null;
  }
  var element = (0, _asElement2.default)(node);
  var dataStr = element.getAttribute(_DocsDataAttributes2.default.ATOMIC_BLOCK_DATA);
  if (!dataStr) {
    return null;
  }
  var data = void 0;
  try {
    data = JSON.parse(dataStr);
  } catch (ex) {
    return null;
  }
  var _data2 = data,
      blockType = _data2.blockType,
      entityData = _data2.entityData;

  if (!blockType || !entityData) {
    return null;
  }
  return {
    type: 'atomic',
    data: null
  };
}

function normalizeNodeForTable(safeHTML, nodeName, node) {
  if (nodeName !== 'TABLE') {
    return null;
  }
  var element = (0, _asElement2.default)(node);
  if (element.hasAttribute(_DocsDataAttributes2.default.TABLE)) {
    // Already an docs node
    return null;
  }

  var entityData = (0, _createDocsTableEntityDataFromElement2.default)(safeHTML, element, convertFromHTML);
  var data = {
    blockType: _DocsBlockTypes2.default.DOCS_TABLE,
    entityData: entityData
  };
  var atomicNode = new FakeAtomicElement(data);
  return atomicNode;
}

exports.default = convertFromHTML;