'use strict';

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _DocsBlockTypes = require('./DocsBlockTypes');

var _DocsBlockTypes2 = _interopRequireDefault(_DocsBlockTypes);

var _DocsDataAttributes = require('./DocsDataAttributes');

var _DocsDataAttributes2 = _interopRequireDefault(_DocsDataAttributes);

var _DocsDecorator = require('./DocsDecorator');

var _DocsDecorator2 = _interopRequireDefault(_DocsDecorator);

var _DocsDecoratorTypes = require('./DocsDecoratorTypes');

var _DocsDecoratorTypes2 = _interopRequireDefault(_DocsDecoratorTypes);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _DocsHelpers = require('./DocsHelpers');

var _draftConvert = require('draft-convert');

var _draftJs = require('draft-js');

var _DocsTableModifiers = require('./DocsTableModifiers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_TableEntityData = require('./Types').babelPluginFlowReactPropTypes_proptype_TableEntityData || require('prop-types').any;

// See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
var CSS_BOLD_MIN_NUMERIC_VALUE = 500;
var CSS_BOLD_VALUES = new _set2.default(['bold', 'bolder']);
var CSS_NOT_BOLD_VALUES = new _set2.default(['light', 'lighter', 'normal']);
var CSS_BOLD_MIN_NUMERIC_VALUE_PATTERN = /^\d+$/;

// See https://draftjs.org/docs/advanced-topics-inline-styles.html
var STYLE_BOLD = 'BOLD';

// See https://www.w3schools.com/jsref/prop_node_nodetype.asp
// See https://msdn.microsoft.com/en-us/library/windows/desktop/ms649015
// Note that the pasted HTML may contain HTML comment like
// `<!--StartFragment -->` generated by browser. Developer should check
// `nodeType` to ensure only valid HTML element is used.
var NODE_TYPE_ELEMENT = Node.ELEMENT_NODE;

var ZERO_WIDTH_CHAR = '\u200B';

// Processing HTML is hard, and here are some resources that could be helpful.
// https://goo.gl/4mvkWg : Sample HTML converted into Draft content state
// https://github.com/facebook/draft-js/issues/416#issuecomment-221639163
// https://github.com/draft-js-plugins/draft-js-plugins/pull/474/files
// https://zhuanlan.zhihu.com/p/24951621
// https://github.com/facebook/draft-js/issues/787
// https://github.com/HubSpot/draft-convert#convertfromhtml
// https://zhuanlan.zhihu.com/p/24951621
function docsConvertFromHTML(editorState, html) {
  // See https://github.com/HubSpot/draft-convert#convertfromhtml
  var safeHTML = getSafeHTML(html);
  var handlers = {
    htmlToBlock: htmlToBlock,
    htmlToEntity: htmlToEntity,
    htmlToStyle: htmlToStyle,
    textToEntity: textToEntity
  };
  (0, _keys2.default)(handlers).forEach(function (key) {
    var fn = handlers[key];
    handlers[key] = fn.bind(null, safeHTML);
  });
  var convertedContentState = (0, _draftConvert.convertFromHTML)(handlers)(safeHTML.html);
  return _draftJs.Modifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), convertedContentState.blockMap);
}

////////////////////////////////////////////////////////////////////////////////

// Fake DOM Node that is good enough work with. This is faster than using
// a real DOM node.

var FakeAtomicNode = function () {
  function FakeAtomicNode(data) {
    (0, _classCallCheck3.default)(this, FakeAtomicNode);
    this._attributes = new _map2.default();
    this.nodeName = 'FIGURE';
    this.nodeType = NODE_TYPE_ELEMENT;

    this._attributes.set(_DocsDataAttributes2.default.ATOMIC_BLOCK_DATA, (0, _stringify2.default)(data));
  }

  (0, _createClass3.default)(FakeAtomicNode, [{
    key: 'getAttribute',
    value: function getAttribute(name) {
      return this._attributes.get(name) || '';
    }
  }, {
    key: 'hasAttribute',
    value: function hasAttribute(name) {
      return this._attributes.has(name);
    }
  }]);
  return FakeAtomicNode;
}();

function getSafeHTML(html) {
  var body = (0, _DocsHelpers.getSafeBodyFromHTML)(html);
  var unsafeNodes = new _map2.default();
  var safeHTML = '';

  if (body) {
    // The provided chidlren nodes inside the atomic block should never be
    // rendered. Instead, the atomic block should only render with its entity
    // data. Therefore, move the children nodes into the quarantine pool
    // otherwise these chidlren wil be rendered as extra block after the atomic
    // block.
    var quarantine = function quarantine(node) {
      var id = (0, _DocsHelpers.uniqueID)();
      node.id = id;
      unsafeNodes.set(id, node.cloneNode(true));
      node.innerHTML = ZERO_WIDTH_CHAR;
    };

    var atomicNodes = body.querySelectorAll('figure[' + _DocsDataAttributes2.default.ATOMIC_BLOCK_DATA + ']');
    (0, _from2.default)(atomicNodes).forEach(quarantine);

    var tableNodes = body.querySelectorAll('table');
    (0, _from2.default)(tableNodes).forEach(quarantine);

    var mathNodes = body.querySelectorAll('span[' + _DocsDataAttributes2.default.DECORATOR_TYPE + '="' + _DocsDecoratorTypes2.default.DOCS_MATH + '"]');
    (0, _from2.default)(mathNodes).forEach(quarantine);

    var imgNodes = body.querySelectorAll('img');
    (0, _from2.default)(imgNodes).forEach(imageNodeToPlaceholder);
    safeHTML = body.innerHTML;
  }

  return {
    html: safeHTML,
    unsafeNodes: unsafeNodes
  };
}

function htmlToStyle(safeHTML, nodeName, node, currentStyle) {
  if (node.nodeType !== NODE_TYPE_ELEMENT) {
    return currentStyle;
  }
  var el = (0, _DocsHelpers.asElement)(node);
  var newStyle = currentStyle;
  if (nodeName === 'figure') {
    var className = el.className;

    if (className) {
      var classNames = className.split(/\s+/g);
      newStyle = currentStyle.withMutations(function (style) {
        classNames.forEach(function (className) {
          style.add(className);
        });
      });
    }
  }
  // When content is copied from google doc, its HTML may use a tag
  // like `<b style="font-weight: normal">...</b>` which should not make the
  // text bold. This block handles such case.
  // See related issue: https://github.com/facebook/draft-js/issues/481
  // `el.style` could be `null` if `el` is `<math />`.
  var fontWeight = el.style ? el.style.fontWeight : null;
  if (fontWeight) {
    if (CSS_BOLD_VALUES.has(fontWeight)) {
      newStyle = newStyle.add(STYLE_BOLD);
    } else if (CSS_NOT_BOLD_VALUES.has(fontWeight)) {
      newStyle = newStyle.remove(STYLE_BOLD);
    } else if (CSS_BOLD_MIN_NUMERIC_VALUE_PATTERN.test(fontWeight)) {
      newStyle = parseInt(fontWeight, 10) >= CSS_BOLD_MIN_NUMERIC_VALUE ? newStyle.add(STYLE_BOLD) : newStyle.remove(STYLE_BOLD);
    }
  }
  return newStyle;
}

function htmlToEntity(safeHTML, nodeName, node, createEntity) {
  if (node.nodeType !== NODE_TYPE_ELEMENT) {
    return null;
  }
  var el = (0, _DocsHelpers.asElement)(node);
  switch (nodeName) {
    case 'figure':
      return htmlToAtomicBlockEntity(safeHTML, nodeName, el, createEntity);

    case 'table':
      el = normalizeNodeForTable(safeHTML, nodeName, el);
      if (el) {
        nodeName = el.nodeName.toLowerCase();
        return htmlToAtomicBlockEntity(safeHTML, nodeName, el, createEntity);
      }
      break;
    case 'a':
      return createEntity(_DocsDecoratorTypes2.default.LINK, 'MUTABLE', { url: el.href });
  }

  if (!el) {
    return null;
  }

  var valueStr = el.getAttribute(_DocsDataAttributes2.default.DECORATOR_DATA);
  var ent = void 0;
  if (valueStr) {
    try {
      ent = JSON.parse(valueStr);
    } catch (ex) {
      return null;
    }
  }

  if (!ent) {
    return null;
  }
  return createEntity(ent.type, ent.mutability, ent.data);
}

function htmlToAtomicBlockEntity(safeHTML, nodeName, node, createEntity) {
  if (nodeName !== 'figure') {
    return null;
  }
  var element = (0, _DocsHelpers.asElement)(node);
  var dataStr = element.getAttribute(_DocsDataAttributes2.default.ATOMIC_BLOCK_DATA);
  if (!dataStr) {
    return null;
  }
  var data = void 0;
  try {
    data = JSON.parse(dataStr);
  } catch (ex) {
    return null;
  }
  var _data = data,
      blockType = _data.blockType,
      entityData = _data.entityData;

  if (!blockType || !entityData) {
    return null;
  }
  return createEntity(blockType, 'IMMUTABLE', entityData);
}

function textToEntity(safeHTML, text, createEntity) {
  return [];
}

function htmlToBlock(safeHTML, nodeName, node) {

  var normalizedNode = normalizeNodeForTable(safeHTML, nodeName, node);
  if (normalizedNode) {
    node = normalizedNode;
    nodeName = node.nodeName.toLowerCase();
  }
  return htmlToAtomicBlock(safeHTML, nodeName, node);
}

function htmlToAtomicBlock(safeHTML, nodeName, node) {
  if (nodeName !== 'figure') {
    return null;
  }
  var element = (0, _DocsHelpers.asElement)(node);
  var dataStr = element.getAttribute(_DocsDataAttributes2.default.ATOMIC_BLOCK_DATA);
  if (!dataStr) {
    return null;
  }
  var data = void 0;
  try {
    data = JSON.parse(dataStr);
  } catch (ex) {
    return null;
  }
  var _data2 = data,
      blockType = _data2.blockType,
      entityData = _data2.entityData;

  if (!blockType || !entityData) {
    return null;
  }
  return {
    type: 'atomic',
    data: null
  };
}

function normalizeNodeForTable(safeHTML, nodeName, node) {
  if (nodeName !== 'table') {
    return null;
  }
  var element = (0, _DocsHelpers.asElement)(node);
  if (element.hasAttribute(_DocsDataAttributes2.default.TABLE)) {
    // Already an docs node
    return null;
  }

  var entityData = createTableEntityDataFromElement(safeHTML, element);
  var data = {
    blockType: _DocsBlockTypes2.default.DOCS_TABLE,
    entityData: entityData
  };
  var atomicNode = new FakeAtomicNode(data);
  return atomicNode;
}

function createTableEntityDataFromElement(safeHTML, table) {
  (0, _invariant2.default)(table.nodeName === 'TABLE', 'must be a table');
  var entityData = {
    rowsCount: 0,
    colsCount: 0
  };

  // The children of `table` should have been quarantined. We need to access
  // the children from the quarantine pool.
  var el = (0, _DocsHelpers.asElement)(safeHTML.unsafeNodes.get((0, _DocsHelpers.asElement)(table).id));

  // TODO: What about having multiple <tbody />, <thead /> and <col />
  // colsSpan, rowsSpan...etc?
  if (el.rows.length === 0 || el.rows[0].cells.length === 0) {
    return entityData;
  }

  var decorator = _DocsDecorator2.default.get();
  var emptyEditorState = _draftJs.EditorState.createEmpty(decorator);

  var data = entityData;
  var rowsCount = el.rows.length;
  var colsCount = (0, _from2.default)(el.rows).reduce(function (max, row) {
    return Math.max(max, row.cells.length);
  }, 0);

  data.rowsCount = rowsCount;
  data.colsCount = colsCount;
  var rr = 0;
  var useHeader = false;
  while (rr < rowsCount) {
    var cc = 0;
    while (cc < colsCount) {
      // row could be empty, if "rowSpan={n}" is set.
      // cell could be  empty, if "colsSpan={n}" is set.
      var _html = '';
      var row = el.rows[rr];
      if (row) {
        var cell = row.cells[cc];
        if (cell) {
          _html = cell.innerHTML;
          if (rr === 0 && cell.nodeName === 'TH') {
            useHeader = true;
          }
        }
      }
      // html = 'xxx';
      var contentState = docsConvertFromHTML(emptyEditorState, _html);
      var id = (0, _DocsTableModifiers.getEntityDataID)(rr, cc);
      data[id] = (0, _draftJs.convertToRaw)(contentState);
      cc++;
    }
    rr++;
  }

  if (rowsCount > 1 || useHeader) {
    entityData = (0, _DocsTableModifiers.toggleHeaderBackground)(entityData);
  }

  return entityData;
}

// img does not have characters data, thus DraftJS wo't be able to
// parse its entity data. The workaround is to replace it with an
// empty element that can be converted to DocsImage later.
function imageNodeToPlaceholder(img) {
  var parentNode = img.parentNode,
      src = img.src;

  if (!parentNode || !src) {
    return;
  }

  if (img.getAttribute(_DocsDataAttributes2.default.ELEMENT)) {
    // The image is rendered by <DocsSafeImage /> which contains its meta
    // data at its containing <span /> element. We can skip this <img />
    // element.
    parentNode.removeChild(img);
    return;
  }

  var node = document.createElement('ins');
  var decoratorData = {
    type: _DocsDecoratorTypes2.default.DOCS_IMAGE,
    mutability: 'IMMUTABLE',
    data: { url: src }
  };
  node.setAttribute(_DocsDataAttributes2.default.DECORATOR_DATA, (0, _stringify2.default)(decoratorData));
  node.setAttribute(_DocsDataAttributes2.default.DECORATOR_TYPE, _DocsDecoratorTypes2.default.DOCS_IMAGE);
  node.innerHTML = ZERO_WIDTH_CHAR;
  parentNode.insertBefore(node, img);
  parentNode.removeChild(img);
}

module.exports = docsConvertFromHTML;